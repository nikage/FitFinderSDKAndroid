import java.util.Properties

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace = "com.fitfinder.sdk"
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        def versionPropsFile = file("$rootDir/version.properties")
        def versionProps = new Properties()

        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }

        versionCode versionProps['versionCode'].toInteger()
        versionName versionProps['versionName']
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.10"
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }

            groupId = "com.fitfinder.sdk"
            artifactId = "sdk"


            def versionPropsFile = file("$rootDir/version.properties")
            def versionProps = new Properties()

            if (versionPropsFile.exists()) {
                versionProps.load(new FileInputStream(versionPropsFile))
            }

            version = versionProps['versionName']
        }
    }
}


task incrementVersionCode {
    doLast {
        def versionPropsFile = file("$rootDir/version.properties")
        def versionProps = new Properties()

        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }

        def newVersionCode = versionProps['versionCode'].toInteger() + 1
        versionProps['versionCode'] = newVersionCode.toString()

        versionProps.store(new FileOutputStream(versionPropsFile), null)

        println "Version code incremented to $newVersionCode"
    }
}

task incrementVersionName {
    doLast {
        def versionPropsFile = file("$rootDir/version.properties")
        def versionProps = new Properties()

        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }

        def versionParts = versionProps['versionName'].split('\\.')
        def newPatchVersion = versionParts[2].toInteger() + 1
        def newVersionName = "${versionParts[0]}.${versionParts[1]}.$newPatchVersion"
        versionProps['versionName'] = newVersionName

        versionProps.store(new FileOutputStream(versionPropsFile), null)

        println "Version name incremented to $newVersionName"
    }
}
